First of all, we thank the reviewers for carefully reading the paper and
for their feedback.  Below we address two concerns that are expressed by
more than one reviewer, and afterwards we respond to individual remarks.



Several reviewers are concerned about the expressivity of TOPL.  We make
two observations.

a) Properties that need re-binding (such as ListNotCyclic, IterateRopes,
and TaintCheck) cannot be expressed by formalisms based on trace slicing
(such as JavaMOP, tracematches, and quantified event automata).  (This is
not difficult to see, but we attach a short informal explanation at the end
of this response for completeness.)

b) All properties expressible in JavaMOP with finite automata are also
expressible in TOPL.  To see this, the key insight is point 8 of Theorem 1.

In the paper, we selected the examples, emphasized re-binding, and included
point 8 in Theorem 8 in order to convey points (a) and (b) from above.  We
could express these more directly.



Several reviewers are concerned about the relevance of Theorem 2.  Its
immediate consequences are the following, point by point:
  1.  Runtime monitoring is possible.  Moreover it is possible to reliably
      detect properties that do not fail for any program, in order to
      provide a warning.
  2.  It is possible to automatically verify the correctness of
      refactorings involving properties with at most one register.  In
      particular, for such properties it is possible to statically detect
      if they fail for all programs.
  3.  For properties involving more than one register it is *not* possible
      to automatically validate refactorings.
  4.  TOPL properties may be written as (extended) regular expressions,
      using the operations | (or) , & (and) , ; (seq), and * (repeat). (But
      not extended with negation.)
  5.  If users would be able to use TOPL properties to specify good behavior
      (rather than just bad behavior), then they would be able to specify more
      scenarios.
Thus, it is relevant to runtime monitoring, the static analysis of the
properties, and has some language design implications.


--------------------------------------------------------------------------
Reviewer A

"[...] what is the motivation to reduce to register automata ?"

Connections to a well-established model like register automata are
important both from a foundational (we relate to a canonical paradigm) and
an applied viewpoint (there is a wealth of results and constructions we can
refer to).



"For instance, point 6, is that really needed when checking properties
dynamically ? Or is combining properties useful ?"

Please see point 4 above.



"Perhaps there is a direct algorithm for working directly with the
rollback automata and not converting the automata to a register one ?"

That is precisely why rollback TOPL automata are introduced:  They closely
reflect how the implementation works.



"what would happen if we try to express the properties directly in TOPL
[rather than rTOPL]?"

Rollback enables the users to pretend that several events occur atomically,
as in "I := C.iterator()".  This is different from "call C.iterator();
return I" because in the latter case skip transitions may be taken
in-between.  In turn, skip transitions are convenient in practice because
without them almost every state would need several loops.



--------------------------------------------------------------------------
Reviewer B:

"what about the relationship among the specification languages? which
properties can be expressed in both systems?"

Please see our note on expressivity in the beginning of this response.



--------------------------------------------------------------------------
Reviewer C:

"what do you do when the specification is not met?"

The checker logs the property violations it detects (Section 7).  The
input/output behavior of the program is otherwise not affected.  The
resource usage is affected---it uses more memory and more time.



"apparently for efficiency reason, the dynamic checking is not even sound:
it can be the case that a trace does not respect the specifications and the
monitor does not detect it."

There is a setting of the parameters for which monitoring *is* sound (in
the sense described by the reviewer): set the limit on active states to be
infinity (or MAX_INT in our implementation).  The ability to trade
soundness for efficiency is the main idea introduced by QVM, which we
appreciate and reuse, albeit with a different underlying mechanism.



--------------------------------------------------------------------------
Reviewer D

"In particular, the "alphabet" used in TOPL properties basically coincides
with "histories" [Jeffrey, Rathke, 2005]"

The work of Jeffrey and Rathke is indeed fundamental in the semantics of
Java; we do not refer to it only because our chosen model is a plain (not
fully abstract) trace semantics. We thank the reviewer for the references
to attribute grammars and Quantified Event Automata. We made some comments
above on these, and we will include more in the final version of the paper.



"Another criticism to the paper is that one of the selling points of TOPL
properties is the automatic re-binding of specification variables. This is
achieved by introducing non-determinism in the automata"

Re-binding is present in register automata; it is not introduced by us.
Moreover, it is orthogonal to nondeterminism.  There are deterministic
automata that re-bind registers, and there are nondeterministic automata
that do not re-bind values.  Informally, in the setting of quantified event
automata, re-binding is equivalent to having an infinite number of
quantifiers.



"A similar effect to this re-binding can be achieved by simply considering
sets of objects."

Sets are a good idea.  We are, in fact, investigating their use.  Our first
step was to explore the theoretical implications.  Please skim
http://arxiv.org/abs/1209.0680 to get a rough idea of what is involved.



"Can you expand on why it is more natural to express properties as TOPL
properties than as attribute grammars with sets or with Quantified Event
Automata?"

The main ingredient that makes us see TOPL properties as natural is that
the concatenation of labels on a path from ‘start’ to ‘error’ looks very
much like a small Java program that violates the property.



"How does the overhead in your approach compare to the overhead in other
approaches for similar properties?"

We do not have an efficient implementation yet: compared to JavaMOP, which
is one of the fastest tools, our monitors are indeed slower. However, this
is somehow expected as our tool is still at prototype level. On the other
hand, we can be more expressive than JavaMOP (and other tools based on
trace slicing).



--------------------------------------------------------------------------
Some details

Why slicing cannot express properties that use re-binding in an essential
way: Consider the following two families of traces, using the notation from
the slicing literature:
  A = { getList<x1> next<x1,x2> next<x2, x3> ... next<xn, x1> | P }
  B = { getList<x1> next<x1,x2> ... next<x(n-1),xn> | P }
where P is "n is natural, and x1, ..., xn are pairwise distinct values".
The property ListNotCyclic fails on all traces in A, and does not fail on
any of the traces in B.  However, given any parameter binding <b1,b2>, the
corresponding slice is one of [], [next], or [getList next], which is not
enough to distinguish between A and B.  In fact, a similar argument works
even for the property SingletonPattern, which does not use re-binding.



vim:tw=75:fo+=t:spell:
